install.packages("proj")
install.packages("mapproj")
library(maps)
# Bonne equal-area projection with state abbreviations
map("state",proj=’bonne’, param=45)
data(state)
text(mapproject(state.center), state.abb)
# this does not work because the default orientations are different:
map("state",proj=’bonne’, param=45)
text(mapproject(state.center,proj=’bonne’,param=45),state.abb)
map("state",proj="albers",par=c(30,40))
map("state",par=c(20,50)) # another Albers projection
map("world",proj="gnomonic",orient=c(0,-100,0)) # example of orient
# see map.grid for more examples
# tests of projections added RSB 091101
library(maps)
# Bonne equal-area projection with state abbreviations
map("state",proj='bonne', param=45)
data(state)
text(mapproject(state.center), state.abb)
# this does not work because the default orientations are different:
map("state",proj='bonne', param=45)
text(mapproject(state.center,proj='bonne',param=45),state.abb)
map("state",proj="albers",par=c(30,40))
map("state",par=c(20,50)) # another Albers projection
map("world",proj="gnomonic",orient=c(0,-100,0)) # example of orient
# see map.grid for more examples
# tests of projections added RSB 091101
projlist <- c("aitoff", "albers", "azequalarea", "azequidist", "bicentric",
"bonne", "conic", "cylequalarea", "cylindrical", "eisenlohr", "elliptic",
"fisheye", "gall", "gilbert", "guyou", "harrison", "hex", "homing",
"lagrange", "lambert", "laue", "lune", "mercator", "mollweide", "newyorker",
"orthographic", "perspective", "polyconic", "rectangular", "simpleconic",
"sinusoidal", "tetra", "trapezoidal")
x <- seq(-100, 0, 10)
y <- seq(-45, 45, 10)
xy <- expand.grid(x=x, y=y)
pf <- c(0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 2, 0, 1, 0, 2, 0, 2,
0, 0, 1, 0, 1, 0, 1, 2, 0, 0, 2)
res <- vector(mode="list", length=length(projlist))
for (i in seq(along=projlist)) {
if (pf[i] == 0) res[[i]] <- mapproject(xy$x, xy$y, projlist[i])
else if (pf[i] == 1) res[[i]] <- mapproject(xy$x, xy$y, projlist[i], 0)
else res[[i]] <- mapproject(xy$x, xy$y, projlist[i], c(0,0))
}
names(res) <- projlist
lapply(res, function(p) rbind(p$x, p$y))
wons()
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
ctl
trt
plot(ctl~trt)
plot(ctl~ctl)
plot(ctl,ctl)
plot(ctl,trt)
est <- lm(ctl~trt)
print(est)
lines(est)
abline(est)
load("~/Documents/Papers/papers/eckert/2014wons/data.RData")
View(allRel)
source.with.encoding('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R', encoding='UTF-8')
source.with.encoding('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R', encoding='UTF-8')
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
distPlotDHV(20)
)
distPlotDHV(20)
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
distPlotDHV(20)
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
distPlotDHV(20)
source('~/Projects/SkyNet-SkyTraxx/Argentinien/log2omnet.R')
source('~/Projects/SkyNet-SkyTraxx/Argentinien/evalSimplePlots.R')
trace <- read.csv("traceAutonomy0.csv")
plot3d(trace$x, trace$y, trace$z)
thermalposS <- subset(thermalpos, thermalpos$z > min(trace$z) & thermalpos$z < max(trace$z))
thermalposS$y <- 5000-thermalposS$y
plot3d(thermalposS, col="red", add=T)
traceS<-subset(trace, trace$climb>0)
plot(traceS$turn~traceS$z, type='l')
setwd("~/Projects/OMNeTpp/workspace/SkyNet/results")
setwd("~/Projects/OMNeTpp/workspace/SkyNet/results")
trace <- read.csv("traceAutonomy0.csv")
plot3d(trace$x, trace$y, trace$z)
thermalposS <- subset(thermalpos, thermalpos$z > min(trace$z) & thermalpos$z < max(trace$z))
thermalposS$y <- 5000-thermalposS$y
plot3d(thermalposS, col="red", add=T)
traceS<-subset(trace, trace$climb>0)
plot(traceS$turn~traceS$z, type='l')
View(trace)
View(trace)
View(trace)
hist(trace$climb)
hist(trace$climb, brace=50)
hist(trace$climb, braeks=50)
hist(trace$climb, braeks=500)
hist(trace$climb, breaks=50)
hist(trace$z, breaks=50)
hist(trace$turn, breaks=50)
hist(trace$turn, breaks=500)
hist(trace$turn, breaks=100)
summary(trace$turn)
